name: CI
on: 
  pull_request:
    types: [opened, reopened, ready_for_review, synchronize]

permissions:
  contents: read
  checks: write

jobs:
  lint:
    name: Lint
    strategy:
      matrix:
        go-version: [1.21.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
  test:
    name: Test
    strategy:
      matrix:
        go-version: [1.21.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    env:
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: localhost
      DB_DATABASE: dropick_test
      DB_PORT: 5432
    services:
      db:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dropick_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: install dependency
        run: go mod download
      - name: Run migrate
        run : go run cmd/dropick_migrate/migrate_initialize.go
      - name: Run test
        run: go test -v ./...
  docs_update_check:
    name: Docs Update Check
    strategy:
      matrix:
        go-version: [1.21.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: download and execute swag
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          swag init -d internal/apis -g app.go --ot go,yaml -o api
      - id: get_diff
        name: check document has been updated
        run: |
          echo "diff=$(git diff --name-only | grep -E '((api/swagger.yaml)|(api/docs.go))$')" >> $GITHUB_OUTPUT
      - id: not_up_to_date
        name: document has not been updated
        if: ${{ steps.get_diff.outputs.diff }}
        run: |
          echo "previous output is: ${{ steps.get_diff.outputs.diff }}"
          echo "$(git diff)"
          echo "::error file=docs/swagger.yaml::docs seems not updated, please run 'swag init -d internal/apis -g app.go --ot go,yaml -o api' and commit the changes."
          exit 1
      - id: up_to_date
        name: document is up to date
        if: ${{ !steps.get_diff.outputs.diff }}
        run: |
          echo "docs/swagger.yaml is up to date."
          exit 0
